 Welcome back to Let's Get Rusty. My name is Bogdan and this channel is all about the Rust programming language. If that sounds interesting to you, make sure to poke that subscribe button for weekly Rust videos. In the last video, we went over chapter 8, which covered common collections such as strings, vectors, and hash maps. If you haven't already, make sure to check that video out. In this video, we're going over chapter 9, which covers error handling in Rust. So with that, let's get started. First, let's talk about the panic macro. If your program fails in a way that's unrecoverable or you can't handle the error gracefully, then you can call the panic macro, which will immediately quit your program and print out an error message. Here's a simple example. We have our main function and all we do is call panic with the error message crash and burn. So let's go ahead and run our program. Here we have our errors saying main panicked, our error message, and also the line which threw the error. Down here, we also get some helpful text saying that we could display a backtrace using this environment variable. A backtrace will list out all the functions called leading up to the erroring code. And in this case, it wouldn't be that useful because our erroring code is the first line of the main function. So let's move on to an example that would benefit from seeing a backtrace. So here we have another example, and this is extremely contrived, but just for demonstration purposes, we have main, which calls a function called A, and then A calls a function called B, and then B calls a function called C, which takes in a integer. And if that integer is 22, it happens to panic. All right, now let's go ahead and run our program. As expected, we get an error with the message don't pass in 22 at line 15 in main.rs. If we scroll down, you can see that line 15 is in fact our panic call. Now let's just imagine that our C function could be called from a variety of places. So we don't know where the call is coming from. This error message down here doesn't really help us understand who's making the call to C and passing in 22. So for that, let's run our program again with this backtrace environment variable so that we can get the backtrace output. At the top here, we can see that some code in rust standard library is being called by our C function, which is the function that panics, and C is being called by our B function, and B is being called by A. So now we know that C is being called by B. So going back to our program, we can see, oh yeah, B here is calling C with 22, which it's not supposed to be doing. So let's change that to 21. And if we run our program, it compiles without any issues. All right, now let's talk about errors, which are recoverable errors that you can handle gracefully and don't want to crash your program. For those cases, we have the result enum. The result enum is similar to the option enum. Remember the option enum represents some value or no value. Well, the result enum represents success or failure. Just like the option enum, the result enum has two variants, OK and error. OK represents the success case and stores some generic value, and error represents the error case and stores some generic error value. Lastly, just like the option enum, result is very common. So the enum and its variants are brought into scope by default. Here we have an example that uses the result enum. First, we import the file struct from Rust standard library, and then in main, we declare a variable called f and set that equal to this expression right here. We call open on the file struct and pass it a path to the file we want to open. If we hover over open, you can see that open returns a result type. That's because opening a file may fail. For example, the file might not be there. If we hover over f, you could also see that the type of f is result, which could either be a file or an error. So now we must handle the success case and the error case. And to do that, we can use a match expression like so. Here we're using shadowing to redeclare f, and we're setting that equal to a match expression. We're matching on this f up here, which is a result type. And if the variant is okay, we bind the file to this file variable and return it. And if the variant is an error, we bind the error to this error variable, and then panic throwing up this error message and passing it the error. Let's go ahead and run our program. Here we get our errors saying there was a problem opening the file and some more information about the error itself, the code of the error, the kind of error which is not found, and then the message, which is no such file or directory. And that makes sense because currently hello.txt doesn't exist. Now let's say we wanted to handle this a little more gracefully. Instead of panicking when the file doesn't exist, what we want to do is create a new file. The first thing I'll do is bring into scope the error kind enum. This enum will let us match on the type of error we get. Then instead of panicking here, what we'll do is match on the type of error we get. Calling the kind method on our error will give us back an enum representing the kind of error we got. What we want to do is handle the not found error case gracefully. So first let's match on that. Now when the file is not found, we want to create a new file, but creating a new file can fail. So we have to create yet another match statement to handle the result type. Here we're saying if the file is not found, then attempt to create the file, but attempting to create the file might fail. So we match on the result type. And in the success case, we map the file to our FC variable and then return that. And then in the error case, we panic with the message problem creating the file. The last thing we want to do is handle any other type of errors because remember match statements are exhaustive. So we have to handle all cases. Here we're saying if the error is anything other than not found, bind the error to this other error variable and then panic with the message problem opening the file passing in the error. Now let's run our program again. And you can see this time we don't fail. And if we open up our file browser, you can see that we have a new file called hello.txt. Now writing this code using nested match expressions could make it hard to read. So there's another way to write this exact same code using closures. And this is something we'll learn more about in chapter 13. But here's a quick preview. Here we're attempting to open our hello.txt file, and then we're calling unwrap or else, which will give us back the file or call this anonymous function or closure passing in the error. Inside our closure, we have an if statement. If the error is not found, then we attempt to create the file calling unwrap or else again, which will give us back the newly created file. If this call succeeds, notice that we don't have a semicolon at the end here, which means this is an expression or in the failure case, it'll call another closure, which will just panic. And then in the else case here, we also panic. And again, we'll learn more about this in chapter 13. Speaking of unwrapping, let's talk about some useful functions on the result enum. Here we're back to our original example where we're attempting to open the file and then using a match expression to either get the file or panic when an error occurs. Instead of writing this match expression, we can simplify our code by calling unwrap. Here unwrap does the same thing as our match expression. In the success case, it will take the thing stored inside of the OK variant, which in this case is a file and return that. And in the error case, it will panic. And you can also see that our f variable now is of type file. Now we also have the expect method, which allows us to specify the error message that gets passed to the panic macro. So here, for example, we want the message to be failed to open hello dot txt. Let's go ahead and run our program. And as you can see, we get failed to open hello dot txt as expected. Now let's talk about error propagation. Oftentimes when you have a function whose implementation calls something that could fail, you want to return that error back to the caller instead of handling it within the function. This gives more control to the caller who can decide what to do with that error. And this is called error propagation. Let's look at the following example. We have a function called read username from file. And the function returns a result type, which could either be a string, our username, or an error. Inside our function, we attempt to open hello dot txt, which could fail. So open returns a result type, which we store in f. Next, we have a match expression. If opening the file succeeds, then we take that file and store it in f. But if opening the file fails, then we take that error and return it. Next, we create a new string and then call read to string on our file, which will read the contents of our file and store it within the string. Read to string returns a result type. So in the success case, we return the string. And in the error case, again, we return an error. This allows the code calling our function read username from file to determine how best to deal with these errors. We can simplify this code further. So instead of using this match expression, we can simply add a question mark to the end of our call to open. This will do something very similar to calling the unwrap or expect methods. If we succeed in opening the file, then the file is returned and stored in f. And if we fail to get the file, then instead of panicking, our function will end early and return the error. Let's go ahead and remove this code. We can also get rid of this match expression by simplifying the code like so. Here we're calling read to string passing it s. And then we specify a question mark. So if this call fails, then our function will return an error. If we get to this next line, then we know read to string succeeded so we can safely return the string. And lastly, we get a little error here because we're borrowing f as mutable, but it's not declared as a mutable variable. So let's fix that. Now our function is a lot simpler, but we can continue simplifying our function by chaining method calls. So first I'll take our string and move it to the top of the function. Next, we see that we have two related method calls. One is to open the file and the other one is to read from the file. So instead of creating our f variable, we can simply just change those method calls. Here we're opening our file and we specify a question mark. So if there's an error, our function will return that error. And if we succeed in opening the file, then we immediately call read to string and pass it s. And again, we specify a question mark so that if this call fails, our function will return the error. And finally, we just return our string. Now we got our code down from four lines to three lines. Can it get simpler than that? The answer is yes. So first let me change this file import statement so that we import fs directly. And then we could change these three lines to one line. The file system module has a convenient function called read to string, which takes in a path to a file. And returns a result, which could either be a string containing the contents of the file or an error. Now what happens if we try to use the question mark operator in our main function? Well, our main function doesn't return anything. And you can see here we get an error. If we hover over the error states, the question mark operator can only be used in a function that returns result or option. The main function is special. So there are restrictions on what type it could return. One option is to return nothing like we have here. But another option is to return a result type like so. Here we changed main to return a result type. And in the success case, we return a unit, which is basically nothing. And in the error case, we return this weird thing, which is a trait object and something we'll learn more about in chapter 17. But basically, this means any type of error. So now in our function body, we can use the question mark operator. And if everything succeeds, we return a unit. Now that we've covered the panic macro and the result enum, the question is, when should you use either of these? In general, the default should be using the result enum and error propagation. This prevents your program from crashing. And error propagation allows the caller to decide how best to handle the error. You should only use panic in exceptional circumstances. In circumstances in which recovering from the error is not possible. And your program cannot continue because it's in a bad state. So you must end the program. Another appropriate place to allow your code to panic is in example code. In example code, methods like unwrap and expect are used for brevity. And also because in example code, there's no context for determining how to deal with errors. You may also use unwrap or expect in prototype code. So imagine you're trying to get something out really quickly to see if it works. And you don't want to deal with error handling. Then if the code is moving past the prototype phase, you can find all the expect and unwrap statements and easily introduce error handling. Expect and unwrap could also be used in test code. Because in test code, you want your test to fail if something that you expected to succeed fails. Lastly, you may want to use expect or unwrap when you know a call to a function will succeed. In this example, we have a simple program that takes a string and converts it into an IP address enum. Now because this string is hardcoded here, we know that the parse function will always succeed. So we can safely call unwrap. If this string, however, was dynamic and came from something such as user input, then we wouldn't want to call unwrap. We would want to handle the potential error case. The last thing I want to talk about is creating custom types for validation. If you remember, in chapter 2, we created a guessing game, which allowed a user to guess a number from 1 to 100. But we never validated that the number they inputted was between 1 and 100. Now this is a snippet of code from the guessing game with some added validation. So first we take our string and parse it into an integer. And then here we have some validation, which checks that the number is between 1 and 100. And then we continue on with the rest of the game. Now this works, but it's problematic. You can imagine that guess could be used in a lot of other different places. And in those other places, we can't guarantee that guess is between 1 and 100. Somebody might come along and delete this validation, for example, and we might be able to catch it in this snippet of code. But all the other places that use guess wouldn't know. An alternative approach is to create a custom type that handles validation. In this example, we created a guess struct, which has one field called value, which stores our integer. We also have this associated function called new, which takes in a value, validates that it's between 1 and 100, and then returns a new instance of our guess struct with that value. Lastly, we have a method called value, which returns the value stored in our guess struct. And we want this function because we don't want the value field to be manipulated directly. In fact, we don't want the value field to be manipulated at all. Now our guessing game can use this new guess type, and any code dealing with guess can be confident that the value stored inside of it is between 1 and 100. There you have it, chapter 9 of the Rustling book complete. We learned about error handling, we learned about the panic macro, the result enum, using unwrap and expect, using the question mark operator, and more. If you like this video, make sure to give it a like. And if you want to see weekly Rust content, make sure to hit that subscribe button. And with that, I'll see you in the next one. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye.